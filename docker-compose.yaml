services:
  frontend:
    image: frontend-app:local # Use the local image tag
    container_name: frontend-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BACKEND_URL=http://express-app:4242
    depends_on:
      - express-app

  express-app:
    build: .
    container_name: express-app
    ports:
      - "4242:4242"
    environment:
      - NODE_ENV=production
      - PORT=4242
      - ALLOWED_FRONTEND_URL=${ALLOWED_FRONTEND_URL}
      - INFURA_API_KEY=${INFURA_API_KEY}
      - UNISWAP_POOL_ADDRESS=${UNISWAP_POOL_ADDRESS}
      - ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY}
      - DATABASE_URL=postgres://postgres:password@postgres:5432/mydatabase
      - REDIS_QUEUE_HOST=redis-queue
      - REDIS_QUEUE_PORT=6379
      - REDIS_CACHE_HOST=redis-cache
      - REDIS_CACHE_PORT=6379
    depends_on:
      - postgres
      - redis-queue
      - redis-cache

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro

  redis-queue:
    image: redis:7
    container_name: redis-queue
    ports:
      - "6379:6379"

  redis-cache:
    image: redis:7
    container_name: redis-cache
    ports:
      - "6380:6379"
    command: [ "redis-server", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru" ]

volumes:
  postgres_data:
